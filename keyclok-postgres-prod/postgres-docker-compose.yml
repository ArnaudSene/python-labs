version: '3.1'

services:

  db:
    container_name: kc_db
    image: postgres:latest
    ports:
      - 5432:5432
    restart: always
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: password
      POSTGRES_DB: exampledb
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public


  adminer:
    image: adminer
    restart: always
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.panel.loadbalancer.server.port=8080
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.panel-http.entrypoints=http
      - traefik.http.routers.panel-http.rule=Host(`panel.pyapi.pyapps.site`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.panel-https.entrypoints=https
      - traefik.http.routers.panel-https.rule=Host(`panel.pyapi.pyapps.site`)
      - traefik.http.routers.panel-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.panel-https.tls.certresolver=le
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.panel-http.middlewares=https-redirect
      - traefik.http.routers.panel-https.middlewares=admin-auth
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

networks:
  traefik-public:
    external: true

